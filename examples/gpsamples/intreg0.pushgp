# Copyright 2009-2010 Jon Klein
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# A sample PushGP file for a simple test symbolic regression problem.
# In this demo, the system solves the equation y = x, using
# integer symbolic regression.
#
# Tom Helmuth <thelmuth (at) cs.umass.edu>
# 01/12/2010
#

### Set classes for the Push intepreter and individuals.  These
### values can used to implement custom interpreter or individual 
### behaviors.

interpreter-class       	= org.spiderland.Psh.Interpreter
inputpusher-class               = org.spiderland.Psh.InputPusher
individual-class        	= org.spiderland.Psh.PushGPIndividual

# push-frame-mode		= pushstacks

### Setup some standard GP parameters

mutation-percent	= 40
crossover-percent	= 40
simplification-percent	= 10

simplify-flatten-percent= 20

reproduction-simplifications = 25
report-simplifications	= 100
final-simplifications	= 1000

max-generations		= 200
tournament-size         = 7
trivial-geography-radius= 0
max-points-in-program	= 40
mutation-mode		= fair
fair-mutation-range     = .3
population-size 	= 50
execution-limit		= 80
max-random-code-size	= 40

target-function-string = y = x

### The problem class determines how test cases are setup and
### how fitness scores are computed.  The IntSymbolicRegression
### class uses a set of int inputs and a single output.

problem-class		= org.spiderland.Psh.ProbClass.IntSymbolicRegression

#This test case is for y = x
test-cases		= ( ( 1 1 ) ( 2 2 ) ( 5 5 ) ( 41 41 ) ( 95 95 ) ( 124 124 ) )


#Instruction set for y = x
instruction-set = ( integer.% integer.* integer.+ integer.- integer./ integer.< integer.= integer.> integer.dup integer.flush integer.pop integer.rot integer.stackdepth integer.swap integer.erc boolean.dup boolean.flush boolean.pop boolean.rot boolean.stackdepth boolean.swap exec.= exec.do*count exec.do*range exec.do*times exec.dup exec.flush exec.pop exec.rot exec.stackdepth exec.swap registered.input input.makeinputs1 )
