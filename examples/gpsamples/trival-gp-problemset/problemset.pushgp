# Copyright 2009-2010 Jon Klein
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# A common PshGP config file for a set of symbolic regression problems 
# used in the book chapter:
#
# Spector, L., and J. Klein. 2005. Trivial Geography in Genetic Programming. 
# In Genetic Programming Theory and Practice III, edited by T. Yu, R.L. Riolo, 
# and B. Worzel, pp. 109-124. Boston, MA: Kluwer Academic Publishers. 
#
# http://hampshire.edu/lspector/pubs/trivial-geography-toappear.pdf
#
# Though the problem sets are the same as those presented in the paper, the
# PushGP parameters and PushGP implementation are different than those used 
# in the paper and may produce different results.
#
# Jon Klein <jk [at] spiderland.org>
# 06/14/2008
#

### We can optionally read in some additional parameters
include ../standard.pushgp

### Set classes for the Push intepreter and individuals.  We 
### can use this to implement custom interpreter behaviors.

interpreter-class	= org.spiderland.Psh.Interpreter
individual-class	= org.spiderland.Psh.PushGPIndividual

### Setup some standard GP parameters

population-size 	= 2000
execution-limit		= 200
tournament-size 	= 7
mutation-percent	= 20
crossover-percent	= 70
max-generations		= 200
max-random-code-size	= 40
fair-mutation-range	= .3

### New Parameters since version 0.1

trivial-geography-radius= 10

simplification-percent	= 0
simplify-flatten-percent= 20

reproduction-simplifications = 25
report-simplifications	= 100
final-simplifications	= 1000


### The problem class determines how test cases are setup and
### how fitness scores are computed.  The FloatSymbolicRegression
### class uses a set of float inputs and a single output.

problem-class		= org.spiderland.Psh.ProbClass.FloatSymbolicRegression

instruction-set	= ( float.* float.+ float.% float.dup float.- float.swap float.erc registered.input)
